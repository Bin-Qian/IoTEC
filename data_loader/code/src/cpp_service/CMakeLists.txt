cmake_minimum_required(VERSION 3.8)
project(cpp_service)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(picture_upload REQUIRED)
find_package(cv_bridge REQUIRED)  #cv_brige为图片传输的重要包需要添加
find_package(OpenCV REQUIRED)

add_executable(server_cpp src/server_cpp.cpp)
target_include_directories(server_cpp PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(server_cpp PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(
  server_cpp
  "rclcpp"
  "std_msgs"
  "picture_upload"
  "cv_bridge"
)

add_executable(client_cpp src/client_cpp.cpp)
target_include_directories(client_cpp PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(client_cpp PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(
  client_cpp
  "rclcpp"
  "std_msgs"
  "picture_upload"
  "cv_bridge"
)
target_link_libraries(client_cpp ${OpenCV_LIBS})
target_link_libraries(server_cpp ${OpenCV_LIBS})

install(TARGETS server_cpp
  DESTINATION lib/${PROJECT_NAME})
install(TARGETS client_cpp
  DESTINATION lib/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
